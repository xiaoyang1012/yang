<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.yang.dao.TbContentMapper">
  <resultMap id="BaseResultMap" type="com.yang.pojo.ContentWithCat">
    <id column="id" jdbcType="VARCHAR" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="title" jdbcType="VARCHAR" property="title" />
    <result column="author" jdbcType="VARCHAR" property="author" />
    <result column="url" jdbcType="VARCHAR" property="url" />
    <result column="pic" jdbcType="VARCHAR" property="pic" />
    <result column="pic2" jdbcType="VARCHAR" property="pic2" />
    <result column="created" jdbcType="TIMESTAMP" property="created" />
    <result column="updated" jdbcType="TIMESTAMP" property="updated" />
    <result column="browse" jdbcType="INTEGER" property="browse" />
    <result column="admire" jdbcType="INTEGER" property="admire" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.yang.pojo.TbContent">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Base_Column_List">
    id, category, title, author, url, pic, pic2, created, updated, browse, admire
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_content
    where id = #{id,jdbcType=VARCHAR}
  </select>
  
  <select id="selectAll"  resultMap="BaseResultMap">
    select a.*,b.name
    from tb_content a join tb_item_cat b on(a.category=b.id)
  
  </select> 
  
  <select id="selectOneCatList" parameterType="long" resultMap="BaseResultMap">
    select a.*,b.name
    from tb_content a join tb_item_cat b on(a.category=b.id)
  	where a.category=#{category,jdbcType=VARCHAR}
  </select>
  
  <select id="contentSortedByBrowse"  resultType="com.yang.pojo.TbContent">
    select id,title,browse 
    from tb_content 
    where status='已发布'
    order by browse desc
  </select>
  
  <select id="contentSortedByAdmire"  resultType="com.yang.pojo.TbContent">
    select id,title,admire,pic  
    from tb_content 
    where status='已发布'
    order by admire desc
  </select>
  
  <select id="selectOneContent" parameterType="long" resultMap="BaseResultMap">
    select a.*,b.name
    from tb_content a join tb_item_cat b on(a.category=b.id)
   	where a.id = #{id,jdbcType=VARCHAR}
  </select>
  
  
  <select id="selectAllPushed"  resultMap="BaseResultMap">
    select a.*,b.name
    from tb_content a join tb_item_cat b on(a.category=b.id)
   	where a.status='已发布'
  </select>
  
  
  <delete id="deleteByPrimaryKey" parameterType="string">
    delete from tb_content
    where id in (#{ids,jdbcType=VARCHAR})
  </delete>
  <insert id="insert" parameterType="com.yang.pojo.TbContent">
    insert into tb_content (id, category, title, 
      author, url, pic, pic2, 
      created, updated, browse,
      admire, content,status)
    values (#{id,jdbcType=VARCHAR}, #{category,jdbcType=BIGINT}, #{title,jdbcType=VARCHAR}, 
      #{author,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR}, #{pic,jdbcType=VARCHAR}, #{pic2,jdbcType=VARCHAR}, 
      #{created,jdbcType=TIMESTAMP}, #{updated,jdbcType=TIMESTAMP}, #{browse,jdbcType=INTEGER}, 
      #{admire,jdbcType=INTEGER}, #{content,jdbcType=LONGVARCHAR}, #{status,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.yang.pojo.TbContent">
    insert into tb_content
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="category != null">
        category,
      </if>
      <if test="title != null">
        title,
      </if>
      <if test="author != null">
        author,
      </if>
      <if test="url != null">
        url,
      </if>
      <if test="pic != null">
        pic,
      </if>
      <if test="pic2 != null">
        pic2,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="updated != null">
        updated,
      </if>
      <if test="browse != null">
        browse,
      </if>
      <if test="admire != null">
        admire,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="category != null">
        #{category,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="pic != null">
        #{pic,jdbcType=VARCHAR},
      </if>
      <if test="pic2 != null">
        #{pic2,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null">
        #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="browse != null">
        #{browse,jdbcType=INTEGER},
      </if>
      <if test="admire != null">
        #{admire,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.yang.pojo.TbContent">
    update tb_content
    <set>
      <if test="category != null">
        category = #{category,jdbcType=BIGINT},
      </if>
      <if test="title != null">
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="author != null">
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="url != null">
        url = #{url,jdbcType=VARCHAR},
      </if>
      <if test="pic != null">
        pic = #{pic,jdbcType=VARCHAR},
      </if>
      <if test="pic2 != null">
        pic2 = #{pic2,jdbcType=VARCHAR},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=TIMESTAMP},
      </if>
      <if test="updated != null">
        updated = #{updated,jdbcType=TIMESTAMP},
      </if>
      <if test="browse != null">
        browse = #{browse,jdbcType=INTEGER},
      </if>
      <if test="admire != null">
        admire = #{admire,jdbcType=INTEGER},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=VARCHAR}
  </update>
  
  <update id="rollBackBlog" parameterType="string">
    update tb_content
    set status='草稿'
    where id = #{id,jdbcType=VARCHAR}
  </update>
 
 <update id="addBrowse" >
 	
    update tb_content
    set browse=browse+1
    where id = #{id,jdbcType=VARCHAR}
  </update>
 
 <update id="addAdmire" >
 	
    update tb_content
    set admire=admire+1
    where id = #{id,jdbcType=VARCHAR}
  </update>
 
  <update id="releaseBlog" parameterType="string">
    update tb_content
    set status='已发布'
    where id = #{id,jdbcType=VARCHAR}
  </update>
 
  
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.yang.pojo.TbContent">
    update tb_content
    set category = #{category,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      pic = #{pic,jdbcType=VARCHAR},
      pic2 = #{pic2,jdbcType=VARCHAR},
      created = #{created,jdbcType=TIMESTAMP},
      updated = #{updated,jdbcType=TIMESTAMP},
      browse = #{browse,jdbcType=INTEGER},
      admire = #{admire,jdbcType=INTEGER},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.yang.pojo.TbContent">
    update tb_content
    set category = #{category,jdbcType=BIGINT},
      title = #{title,jdbcType=VARCHAR},
      author = #{author,jdbcType=VARCHAR},
      url = #{url,jdbcType=VARCHAR},
      pic = #{pic,jdbcType=VARCHAR},
      pic2 = #{pic2,jdbcType=VARCHAR},
      created = #{created,jdbcType=TIMESTAMP},
      updated = #{updated,jdbcType=TIMESTAMP},
      browse = #{browse,jdbcType=INTEGER},
      admire = #{admire,jdbcType=INTEGER}
    where id = #{id,jdbcType=VARCHAR}
  </update>
</mapper>